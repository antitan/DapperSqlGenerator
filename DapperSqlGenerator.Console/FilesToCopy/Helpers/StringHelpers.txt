using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

namespace {projectNamespace}.Common.Helpers
{
    public static class StringHelpers
    {
        public static string CleanXmlForWordDocument(string input) 
        {
            string pattern = "&(?!#\\d+;)";  // Cherche '&' qui n'est pas suivi par '#', des chiffres et ';'
            string output = Regex.Replace(input, pattern, "");
            return output;
        }


        public static string ExtractSubstringBetweenChars(string input, char beginChar, char endChar)
        {
            int startIndex = input.IndexOf(beginChar);
            int endIndex = input.LastIndexOf(endChar);

            if (startIndex >= 0 && endIndex >= 0 && endIndex > startIndex)
            {
                return Regex.Unescape(input.Substring(startIndex, endIndex - startIndex + 1));
            }
            else
            {
                throw new ArgumentException($"Input does not contain valid {beginChar} and {endChar}.");
            }
        }

        public static string RemoveAccentsAndSpecialCharacters(string input)
        {
            if (string.IsNullOrEmpty(input))
            {
                return string.Empty;
            }

            string normalizedString = input.Normalize(NormalizationForm.FormD);
            StringBuilder stringBuilder = new StringBuilder();

            foreach (char c in normalizedString)
            {
                UnicodeCategory uc = CharUnicodeInfo.GetUnicodeCategory(c);
                if (uc != UnicodeCategory.NonSpacingMark)
                {
                    stringBuilder.Append(c);
                }
            }

            string noAccents = stringBuilder.ToString().Normalize(NormalizationForm.FormC);

            // Remove special characters, but keep spaces
            //string noSpecialCharacters = Regex.Replace(noAccents, @"[^0-9a-zA-Z\s]+", "");

            return noAccents;
        }

        public static string RemoveAccentsAndSpecialCharactersToLower(string input)
        {
            return RemoveAccentsAndSpecialCharacters(input).ToLower();
        }

        public static int? TryExtractYear(string year)
        {
            int? res = null;
            int yearInt = 0;
            //cas: 2009
            if (year.Length == 4)
            {
                if (int.TryParse(year, out yearInt))
                    res = yearInt;
            }
            //cas: 2009-2011
            else if (year.Length == 9)
            {
                year = year.Substring(5, 4);
                if (int.TryParse(year, out yearInt))
                    res = yearInt;
            }
            return res;
        }

        #region CompareStrings
        // Compares the two strings based on letter pair matches
        public static double CompareStrings(string str1, string str2)
        {
            List<string> pairs1 = WordLetterPairs(str1.ToUpper());
            List<string> pairs2 = WordLetterPairs(str2.ToUpper());

            int intersection = 0;
            int union = pairs1.Count + pairs2.Count;

            for (int i = 0; i < pairs1.Count; i++)
            {
                for (int j = 0; j < pairs2.Count; j++)
                {
                    if (pairs1[i] == pairs2[j])
                    {
                        intersection++;
                        pairs2.RemoveAt(j);//Must remove the match to prevent "AAAA" from appearing to match "AA" with 100% success
                        break;
                    }
                }
            }

            return (2.0 * intersection * 100) / union; //returns in percentage
                                                       //return (2.0 * intersection) / union; //returns in score from 0 to 1
        }

        // Gets all letter pairs for each
        private static List<string> WordLetterPairs(string str)
        {
            List<string> AllPairs = new List<string>();

            // Tokenize the string and put the tokens/words into an array
            string[] Words = Regex.Split(str, @"\s");

            // For each word
            for (int w = 0; w < Words.Length; w++)
            {
                if (!string.IsNullOrEmpty(Words[w]))
                {
                    // Find the pairs of characters
                    string[] PairsInWord = LetterPairs(Words[w]);

                    for (int p = 0; p < PairsInWord.Length; p++)
                    {
                        AllPairs.Add(PairsInWord[p]);
                    }
                }
            }
            return AllPairs;
        }

        // Generates an array containing every two consecutive letters in the input string
        private static string[] LetterPairs(string str)
        {
            int numPairs = str.Length - 1;
            string[] pairs = new string[numPairs];

            for (int i = 0; i < numPairs; i++)
            {
                pairs[i] = str.Substring(i, 2);
            }
            return pairs;
        }
        #endregion CompareStrings
    }

}
